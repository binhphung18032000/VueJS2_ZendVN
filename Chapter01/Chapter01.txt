Bài 1: Giới thiệu chương học và phân tích kiến thức
===============================================================
Bài 2: VueJS và những thông tin cần biết
===============================================================
Bài 3: Cách xử lý sự kiện trong vuejs

1. Chỉ thị v-on
---------------------------------------------------------------
2. Event modifiers
---------------------------------------------------------------
3. Computed
---------------------------------------------------------------
3. Two ways binding

<head>
 <script src="...vuejs"
<body>
 #app
  h1: FirstName = {{firstName}}
  p: about = {{about}}
  input: placeholder="Input first name" type="text" v-on:keyup="handleKeyUp" hoặc v-model="firstName"
  textarea v-model="about"
</body>
 script:
  var app = new Vue({
   el: '#app',
   data: {
    firstName: '',
    about: ''
   },
   methods: {
    handleKeyUp(e){
     this.firstName = e.target.value;
     console.log(e.target.value);
    }
   }
  })
---------------------------------------------------------------
4. Binding class. (:name="'gender_' + index")

button: @click="changeActive" Change Active
button: @click="changeError" Change Error
//.demo :class="objClass"
hoặc :class="'demo-' + textClass + ' error'"

createApp({
      data() {
        return {
          textClass: 'active',
	  isActive: false,
	  isError: false,
        };
      },
         methods: {
           changeActive() {
             this.isActive = !this.isActive;
           },
           changeError() {
             this.isError = !this.isError;
           },
         },
	computed: {
	 objClass(){
	  return {
	    active: this.isActive,
	    error: this.isError,
	  }
	 }
	}
    }).mount("#app");
---------------------------------------------------------------
5. Binding style.
:style="{ backgroundImage: 'url(' + bg-main + ')' }"
hoặc :style="{ backgroundImage: openBackground }"
hoặc :style="objectBackground"
  :style="{color: activeColor, fontSize: fontSize + 'px', marginTop: '20px'}" Test style binding

<script>
    const { createApp } = Vue;

    createApp({
      data() {
        return {
          activeColor: 'red',
	  fontSize: 20,
	  bg-main: "image url....."
        };
      },
      methods: {
        
      },
      computed: {
        openBackground(){
	 return 'url(' + bg-main + ')';
	},
	objectBackground(){
	 return {
	   backgroundImage: 'url('+this.bg-main+')',
	   margin: '10px',
	   paddingLeft: '30px'
	 }
	}
      },
    }).mount("#app");
  </script>

===============================================================
Bài 4: Biểu thức điều kiện và vòng lặp.

1. Conditions
ul#tabs
 li:Dang nhap @click="changeTab('login')"
 li:Dang ky @click="changeTab('register')"
.login v-if="tabSelected === 'login'"
//.register v-else>
hoặc .register v-else-if="tabSelected === 'register'"

hoặc
.login v-show="tabSelected === 'login'"
hoặc .register v-show="tabSelected === 'register'"

<script>
    const { createApp } = Vue;

    createApp({
      data() {
        return {
          tabSelected: 'login',
        };
      },
      methods: {
        changeTab(text){
	 this.tabSelected = text
	}
      },
      computed: {
        
      },
    }).mount("#app");
  </script>

---------------------------------------------------------------
2. Loop.

ul>li: v-for="(value, key) in scores"
	{{key}} : {{value}}

div>div: v-for="(blog, index) in listBlogs" :key="index"
	{{blog.id}} - {{blog.price}} .....

<script>
    const { createApp } = Vue;

    createApp({
      data() {
        return {
	  scores:{
	   english: 5,
	   math: 8,
	   physics: 3,
	  },
          listBlogs: [
	   {
	    "id": 1,
	    "product_name": "IP 14",
	    "price": 50000000,
            "description": "hello íp4"
	   },
	   {
	    "id": 2,
	    "product_name": "IP 14",
	    "price": 50000000,
            "description": "hello íp4"
	   },
	   {
	    "id": 3,
	    "product_name": "IP 14",
	    "price": 50000000,
            "description": "hello íp4"
	   },
	   {
	    "id": 4,
	    "product_name": "IP 14",
	    "price": 50000000,
            "description": "hello íp4"
	   },
	  ]
        };
      },
    }).mount("#app");
  </script>

---------------------------------------------------------------
3. Note.

.user v-for="user in userActive": {{user.email}}

<script>
    const { createApp } = Vue;

    createApp({
      data() {
        return {
	  arrUser: [
	   {
	     email: "test1@gmail.com",
	     isActive: false
 	   },
	   {
	     email: "test2@gmail.com",
	     isActive: true
 	   },
	   {
	     email: "test3@gmail.com",
	     isActive: false
 	   },
	  ],
        };
      },
      computed: {
	userActive(){
	 return this.arrUser.filter(function(u){
	  return u.isActive;
	 })
	}
      }
    }).mount("#app");
  </script>

===============================================================
Bài 5: Lưu ý về Array, object. BT thực hành.

1. Array & object.

ul>li v-for="(score,key) in objScore": {{key}} : {{score}}
ul>li v-for="number in arrNumber": {{number}}

<script>
    const { createApp } = Vue;

    createApp({
      data() {
        return {
	  objScore: {
	   math: 7.9,
	  }
	  arrNumber: [1,2,3,4,5,6]
        };
      },
    }).mount("#app");
  </script>

---------------------------------------------------------------
2. Practice: Shopping mini

---------------------------------------------------------------
3. Data and prices

createApp({
    data() {
        return {
            title: 'Áo bóng đá nam vải Mỹ nhập khẩu',
            url: 'https://shopeefood.vn/ho-chi-minh/ta-la-an-vat-mi-xao-com-chien-sinh-to-phan-van-tri',
            target: '_blank',
            price: 100000,
            sale: 0.5,
            selectedProduct: 2,
            listProductDetail: [
                {
                    image: './images/spain.jpg',
                    quantity: 3,
                    shirtColor: 'Màu đỏ máu lửa'
                },
                {
                    image: './images/italia.jpg',
                    quantity: 10,
                    shirtColor: 'Màu xanh nước biển'
                },
                {
                    image: './images/brazil.jpg',
                    quantity: 0,
                    shirtColor: 'Màu vàng gia tộc'
                },
            ]
        };
    },
    computed: {
        formatOriginalPrice() {
            var originalPrice = this.price;
            return new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'VND' }).format(originalPrice);
        },
        formatFinalPrice() {
            var finalPrice = this.price - this.sale * this.price;
            return new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'VND' }).format(finalPrice);
        },
        priceSaleOff() {
            return this.sale * 100;
        },
    }
}).mount("#app");

<div class="wrapper-price">
                        <div class="final-price">{{ formatFinalPrice }}</div>
                        <div class="origin-price">{{ formatOriginalPrice }}</div>
                        <div class="sale-price">-{{ priceSaleOff }}%</div>
                    </div>

---------------------------------------------------------------
4. Change color 01

computed: {
        ...
        getProductDetail() {
            let index = this.selectedProduct;
            return this.listProductDetail[index];
        }
    }

	     <p class="brand">Thương hiệu: No brand</p>
                    <p class="quantity" v-if="getProductDetail.quantity > 0">Còn lại:	{{getProductDetail.quantity }} Sản phẩm</p>
                    <p class="quantity" v-else>Sản phẩm đã hết hàng</p>


<div class="list-color">
                            <p class="color-text text-red" v-if="getProductDetail.shirtColor == 'Màu đỏ máu 		lửa'">{{
                                getProductDetail.shirtColor }}</p>
                            <p class="color-text text-blue" v-if="getProductDetail.shirtColor == 'Màu xanh nước 		biển'">
                                {{ getProductDetail.shirtColor }}</p>
                            <p class="color-text text-yellow" v-if="getProductDetail.shirtColor == 'Màu vàng gia 		tộc'">
                                {{ getProductDetail.shirtColor }}</p>
                            <ul>
                                <li v-for="(productDetail, index) in listProductDetail">
                                    <img :src="productDetail.image" :alt="productDetail.shirtColor">
                                </li>
                                <!-- <li><img src="./images/blue.jpg" alt="color"></li> -->
                                <!-- <li><img src="./images/red.jpg" alt="color"></li> -->
                            </ul>
                        </div>

---------------------------------------------------------------
5. Change color 02

<ul>
     <li v-for="(productDetail, index) in listProductDetail" :key="index" @click="handleSelectedProduct(index)" :class="classSelectedActive(index)">
         <img :src="productDetail.image" :alt="productDetail.shirtColor">
     </li>
</ul>

methods: {
        handleSelectedProduct(index) {
            this.selectedProduct = index;
        },
        classSelectedActive(index){
	return {
	  active: this.selectedProduct === index;
	}
        }
    }

---------------------------------------------------------------
6. Vue html (v-html) and add quantity to cart

data() {
        return {
            description: '<p>lorem100</p>',
            cartNumber: 1, 
        };
    },
methods:{
        handleAddToCart(){
 	if (this.getProductDetail.quantity == 0) {
                    alert("HẾT HÀNG!!!");
               } else {
                    if (this.cartNumber + 1 > this.getProductDetail.quantity) {
                       alert("Vượt quá số lượng hàng đang có!!!");
                    } else {
                       this.cartNumber++;
                    }
               }
       }
}

<div v-html="description">

===============================================================
Bài 6: Cách sử dụng Vue CLI.

1. Install.

---------------------------------------------------------------
2. Structure folder 01

a. Development
- Babel -> ES6 phiên bản mới của ES5
- Webpack -> Công cụ giúp đóng gói code, đóng gói mã nguồn (npm run build)

---------------------------------------------------------------
3. Structure folder 02
- Hướng dẫn sử dụng webpack, thêm extendsion để đọc file .vue

---------------------------------------------------------------
4. Component.
HeaderComponent.vue:
<template>
	<header>
	   <h1> {{contentHeader}}

<script>
	name: 'header-coponent',
	data(){
	   return {
	      contentHeader: 'xin chao component header ^^'
	   }
	}
	
FooterComponent.vue:
<template>
	<footer>
	   <h1> {{contentFooter}}

<script>
	name: 'footer-coponent',
	data(){
	   return {
	      contentFooter: 'xin chao component footer $$'
	   }
	}

App.vue:
<template>
	<header-component />
	<footer-component />

<script>
	import HeaderComponent from "HeaderComponent.vue";
	import FooterComponent from "FooterComponent.vue";
	
	data(){
	   return {},
	},
	components: {
	   HeaderComponent,
	   FooterComponent
	}

===============================================================
Bài 7: Sử dụng props, custom event, slot, ref.

1. Nested Component.
User.vue:
template>
	h2: Người dùng thứ...

ListUsers.vue:
template> h1> Danh sách người dùng:
	<user />
	<user />
	<user />
	<user />
script>
	import User from "";
	...
	components: {
	   User
	}

App.vue:
template> 
	<header-component />
	<list-user />
	<footer-component />
script>
	import ListUser from "";
	...
	components: {
	   ...,
	   ListUser
	}

---------------------------------------------------------------
2. Props down.











